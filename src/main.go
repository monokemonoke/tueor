package main

import (
	"bytes"
	"embed"
	"go/format"
	"html/template"
	"log"
	"os"
)

var (
	//go:embed templates/helloworld/*
	helloworld embed.FS
)

func main() {
	modTemplate, err := template.ParseFS(helloworld, "templates/helloworld/go.mod.txt")
	if err != nil {
		log.Fatal(err)
	}
	modParams := map[string]interface{}{
		"moduleName": "example.com/monokemonoke/hoge",
	}
	generate(modTemplate, modParams, "test-go.mod")

	mainTemplate, err := template.ParseFS(helloworld, "templates/helloworld/main.go.txt")
	if err != nil {
		log.Fatal(err)
	}
	mainParams := map[string]interface{}{
		"message": "example.com/monokemonoke/hoge",
	}
	generateGoCode(mainTemplate, mainParams, "test-main.go")
}

func generate(t *template.Template, params interface{}, filename string) {
	var buf bytes.Buffer
	t.Execute(&buf, params)

	var out bytes.Buffer
	out.Write(buf.Bytes())

	if err := os.WriteFile(filename, out.Bytes(), 0644); err != nil {
		log.Fatalln(err)
	}
}

func generateGoCode(t *template.Template, params interface{}, filename string) {
	var buf bytes.Buffer
	t.Execute(&buf, params)

	var out bytes.Buffer
	out.WriteString("// Code generated by main.go\n")
	out.Write(buf.Bytes())
	body, err := format.Source(out.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile(filename, body, 0644); err != nil {
		log.Fatalln(err)
	}
}
